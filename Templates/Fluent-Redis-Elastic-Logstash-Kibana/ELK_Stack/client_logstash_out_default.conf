input {
        file {
                type => "secure-log"
                path => ["/var/log/secure"]
        }
}
output {
        redis {
                host => "[ip-for-central-server]"
                data_type => "list"
                key => "logstash"
        }
}

# Attempt at proper config:
input {
        file {
        type => "secure-log"
        path => ["/var/log/secure"]
        }
}
output {
        redis {
        ssl => true
				host => "[ip-for-central-server:6379]"
        data_type => "list"
        key => "logstash"
				ssl.certificate_authorities: ["/etc/ca.crt"]
				ssl.certificate: "/etc/client.crt"
				ssl.key: "/etc/client.key"
				codec => json
        }
}

# Attempt at proper config2:
input {
        file {
        type => "secure-log"
        path => ["/var/log/secure"]
        }
}
output {
        redis {
        ssl => true
				host => "[ip-for-central-server:6379]"
        data_type => "list"
        key => "logstash"
				ssl_certificate => "/etc/pki/tls/certs/logstash-forwarder.crt"
				ssl_key => "/etc/pki/tls/private/logstash-forwarder.key"
				codec => json
        }
}

#Now, on your Client Server, copy the ELK Server's SSL certificate into the appropriate location (/etc/pki/tls/certs):

#sudo mkdir -p /etc/pki/tls/certs
#sudo cp /tmp/logstash-forwarder.crt /etc/pki/tls/certs/

#Possible:  Find /etc/logstash/logstash.yml
#Next, find the tls section, and uncomment it. Then uncomment the line that specifies certificate_authorities, and change its value to ["/etc/pki/tls/certs/logstash-forwarder.crt"]. It should look something like this:

filebeat.yml excerpt 5 of 5
...
    tls:
      # List of root certificates for HTTPS server verifications
      certificate_authorities: ["/etc/pki/tls/certs/logstash-forwarder.crt"]
This configures Filebeat to use the SSL certificate that we created on the ELK Server.
