#TEMPLATE FOR NODEPORT-TYPE SERVICE
apiVersion: v1
kind: Service
metadata:
  name: <SERVICE>
  namespace: <NAMESPACE>
spec:
  type: NodePort #Exposes the Service on each Node’s IP at a static port (the NodePort). A ClusterIP Service, to which the NodePort Service routes, is automatically created. You’ll be able to contact the NodePort Service, from outside the cluster, by requesting <NodeIP>:<NodePort>.
  ports:
    - port: <PORT_INTERNAL/CLUSTER_ROUTING_EXPOSED> #Inside the cluster, what port does the service expose?
      targetPort: <POD_PORTS_EXPOSED> # Which port do pods selected by this service expose?
      nodePort: <NODE/HOST_PORT_EXPOSED> #Which port on the node is the service available through?
  selector:
    app:<APPLICATION> 
#
#
#ADDITIONAL NOTES on PORTS for SERVICE-TYPE: 'NodePort':
#
#port
#Expose the service on the specified port internally within the cluster. That is, the service becomes visible on this port, and will send requests made to this port to the pods selected by the service.
#
#targetPort
#This is the port on the pod that the request gets sent to. Your application needs to be listening for network requests on this port for the service to work.
#
#nodePort
#This setting makes the service visible outside the Kubernetes cluster by the node’s IP address and the port number declared in this property. The service also has to be of type NodePort (if this field isn’t specified, Kubernetes will allocate a node port automatically).

---

#TEMPLATE FOR SERVICES *ONLY* EXPOSED INTERNALLY BY THE CLUSER (ONLY REACHABLE BY THE CLUSTER).
apiVersion: v1
kind: Service
metadata:
  name: <SERVICE>
  namespace: <NAMESPACE>
spec:
  type: ClusterIP # Exposes the Service on a cluster-internal IP. Choosing this value makes the Service only reachable from within the cluster. This is the default ServiceType.
  ports:
    - port: <PORT_INTERNAL/CLUSTER_ROUTING_EXPOSED> #Inside the cluster, what port does the service expose?
      targetPort: <POD_PORTS_EXPOSED> # Which port do pods selected by this service expose?
  selector:
    app: <APPLICATION>

---

#TEMPLATE FOR HEADLESS-SERVICE-TYPE SERVICE - ALSO, ONLY REACHABLE BY THE CLUSTER.
apiVersion: v1
kind: Service
metadata:
  name: <SERVICE>-headless-service
  namespace: <NAMESPACE>
spec:
  clusterIP: None
  selector: #With selectors - For headless Services that define selectors, the endpoints controller creates Endpoints records in the API, and modifies the DNS configuration to return records (addresses) that point directly to the Pods backing the Service.  
#Without selectors - For headless Services that do not define selectors, the endpoints controller does not create Endpoints records. However, the DNS system looks for and configures either:CNAME records for ExternalName-type Services. OR: A records for any Endpoints that share a name with the Service, for all other types.
    app: <APPLICATION>
  ports:
    - protocol: <TCP/UDP>          
      port: <PORT_02>

---
#
#NOTES ON HEADLESS SERVICES:
#Headless Services
#Sometimes you don’t need load-balancing and a single Service IP. In this case, you can create what are termed “headless” Services, by explicitly specifying "None" for the cluster IP (.spec.clusterIP).
#
#You can use a headless Service to interface with other service discovery mechanisms, without being tied to Kubernetes’ implementation.
#
#For headless Services, a cluster IP is not allocated, kube-proxy does not handle these Services, and there is no load balancing or proxying done by the platform for them. How DNS is automatically configured depends on whether the Service has selectors defined.
#

#Multi-Port Services: For some Services, you need to expose more than one port. Kubernetes lets you configure multiple port definitions on a Service object. When using multiple ports for a Service, you must give all of your ports names so that these are unambiguous. For example:
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app: MyApp
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 9376
    - name: https
      protocol: TCP
      port: 443
      targetPort: 9377

---

#
#External IPs
#If there are external IPs that route to one or more cluster nodes, Kubernetes Services can be exposed on those externalIPs. Traffic that ingresses into the cluster with the external IP (as destination IP), on the Service port, will be routed to one of the Service endpoints. externalIPs are not managed by Kubernetes and are the responsibility of the cluster administrator.
#In the Service spec, externalIPs can be specified along with any of the ServiceTypes. In the example below, “my-service” can be accessed by clients on “80.11.12.10:80” (externalIP:port)
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app: MyApp
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 9376
  externalIPs:
    - 80.11.12.10
#
#
#
